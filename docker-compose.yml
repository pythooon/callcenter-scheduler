services:
  php:
    build:
      context: ./backend
      dockerfile: .docker/Dockerfile
    volumes:
      - ./backend:/var/www/api
      - ./backend/.docker/php.ini:/etc/php/8.4/fpm/php.ini
      - ./backend/.docker/php.ini:/etc/php/8.4/cli/php.ini
    environment:
      WAIT_FOR_DB: "true"
      RUN_MIGRATIONS: "true"
      LOAD_FIXTURES: "true"
      DATABASE_URL: "mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}"
    entrypoint: [ "/var/www/api/.docker/entrypoint.sh" ]
    command: [ "php-fpm" ]
    ports:
      - "9000:9000"
    depends_on:
      - mysql
    networks:
      - scheduler

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - ./backend:/var/www/api
      - ./frontend:/var/www/app
      - ./backend/nginx/api.conf:/etc/nginx/conf.d/api.conf
      - ./backend/nginx/frontend.conf:/etc/nginx/conf.d/frontend.conf
      - ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./backend/nginx/.htpasswd:/etc/nginx/.htpasswd
      - ./backend/nginx/api-certs:/etc/nginx/api-certs
      - ./backend/nginx/frontend-certs:/etc/nginx/frontend-certs
      - ./backend/certbot/conf:/etc/letsencrypt
      - ./backend/certbot/www:/var/www/certbot
    depends_on:
      - php
      - frontend
    networks:
      - scheduler

  mysql:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./backend/db_data:/var/lib/mysql
      - ./backend/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "3306:3306"
    networks:
      - scheduler

  frontend:
    build:
      context: ./frontend
      dockerfile: .docker/Dockerfile
    volumes:
      - ./frontend:/var/www/app
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: .docker/entrypoint.sh
    networks:
      - scheduler

  dozzle:
    image: amir20/dozzle:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    environment:
      DOZZLE_LEVEL: trace
    networks:
      - scheduler

  redis:
    image: redis:alpine
    restart: unless-stopped
    command: redis-server --include /usr/local/etc/redis/redis.conf
    tty: true
    stdin_open: true
    volumes:
      - ./backend/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - scheduler

  certbot:
    image: certbot/certbot
    volumes:
      - ./backend/certbot/conf:/etc/letsencrypt
      - ./backend/certbot/www:/var/www/certbot
    depends_on:
      - nginx
    networks:
      - scheduler

networks:
  scheduler:
    driver: bridge
